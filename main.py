import telebot
import my_token
from openpyxl import load_workbook
from telebot import types

book = load_workbook(filename="Book.xlsx")
genre_sheet = book["Genres"]
user_sheet = book["User-Genre"]

bot = telebot.TeleBot(my_token.telebot_token)
bot.remove_webhook()


@bot.message_handler(commands=['start'])
def start(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    support = types.KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    genres = types.KeyboardButton("–ñ–∞–Ω—Ä—ã")
    predict = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç!")

    markup.add(support, genres, predict)

    bot.send_message(message.chat.id, f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {message.from_user.first_name}!\n'
                                      f'\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –í–∞–º –æ—Å–æ–∑–Ω–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ '
                                      f'–Ω–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –í–∞–º —Ç–æ—á–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è.\n'
                                      f'\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–∏–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏–ª–∏ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ '
                                      f'–∂–∞–Ω—Ä—ã, —á—Ç–æ–±—ã –Ω–∞—à–∞ –ø–æ–¥–±–æ—Ä–∫–∞ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –í–∞–º –µ—â–µ —Å–∏–ª—å–Ω–µ–µ!', reply_markup=markup)
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAELKLZloTEXxO9gsgWaPcTka2f-xskchQAC-BYAAstG0UpJuy3W8rP2XDQE')


def add_user(xlsx_user_id, user_id):
    for i in range(15):
        if i == 0:
            user_sheet.cell(row=xlsx_user_id, column=i+1).value = user_id
        else:
            user_sheet.cell(row=xlsx_user_id, column=i+1).value = 0
    book.save('Book.xlsx')


def find_or_add_user(user_id):
    j = 0
    for row in user_sheet.iter_rows(max_col=1):
        j += 1
        for cell in row:

            if cell.value is None:
                print(f'current user = {j}, id = {user_id}')
                add_user(j, user_id)
                return j

            elif cell.value == user_id:
                print(f'current user = {j}, id = {user_id}')
                return j


def find_user(user_id):
    j = 0
    for row in user_sheet.iter_rows(max_col=1):
        j += 1
        for cell in row:
            if cell.value == user_id:
                print(f'current user = {j}, id = {user_id}')
                return j


def genres_cmd(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    support = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å")
    genres = types.KeyboardButton("–£–±—Ä–∞—Ç—å")
    menu = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
    markup.add(support, genres, menu)

    user_id = message.from_user.id
    user = find_or_add_user(user_id)
    print(user)

    user_genres = get_user_genres(user)

    bot.send_message(message.chat.id, f'–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –∂–∞–Ω—Ä–æ–≤: \n'
                                      f'{user_genres}\n'
                                      f'–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å –Ω–∏–º–∏ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=markup)


def predict_cmd(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    menu = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    markup.add(menu)

    bot.send_message(message.chat.id, f'–ï—Å–ª–∏ –í—ã –ø—Ä–∏—à–ª–µ—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥, –Ω–∞—à–∞ –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å '
                                      f'—Å–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é!',
                     reply_markup=markup)


def return_cmd(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    support = types.KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    genres = types.KeyboardButton("–ñ–∞–Ω—Ä—ã")
    predict = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç!")

    markup.add(support, genres, predict)

    bot.send_message(message.chat.id, f'–ï—â–µ —Ä–∞–∑ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! ü©µ\n'
                                      f'–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã?',
                     reply_markup=markup)

    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAELKNFloT5zfTrwuqGw95BKsyz3_ytmxQACHxcAAkuY0Eo26-gZoGwtPDQE')


def support_cmd(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    menu = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    markup.add(menu)

    bot.send_message(message.chat.id, f'–ë–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ –∫—É—Ä—Å–∞ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ò–¢–ú–û '
                                      f'–ü—Ä—è–Ω–∏—á–Ω–∏–∫–æ–≤—ã–º –ö. –°. –∏ –°–µ—Ä–µ–±—Ä–µ–Ω–Ω–∏–∫–æ–≤–æ–π –í. –í.!üïä \n'
                                      f'–ü–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å—é–¥–∞: @needlessbeating\n'
                                      f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±–æ—Ç–∞ –≤ –≥–∏—Ç—Ö–∞–±–µ: https://github.com/larevies/Music-Bot',
                     reply_markup=markup)
    bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAELK5VlopZR9Q_e89V8bPfoA0jZV-tnbQACShUAApYz0UrkbnOpOGIBNzQE")


def add_cmd(message):
    all_genres = ""
    for i in range(13):
        c = genre_sheet.cell(row=i+1, column=1)
        v = c.value
        all_genres += v
        if i < 12:
            all_genres += ", "

    bot.send_message(message.chat.id, f'–°–ª–µ–¥—É—é—â–∏–µ –∂–∞–Ω—Ä—ã —É—á—Ç–µ–Ω—ã –≤ –±–æ—Ç–µ: {all_genres}.\n'
                                      f'\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∂–∞–Ω—Ä, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:')

    bot.register_next_step_handler(message, pick_genre)


def find_genre(message):

    i = 1
    for column in genre_sheet.iter_cols(1):
        for cell in column:
            i += 1
            if cell.value == message.text:
                return i
    return 0


def find_first_vacant():
    j = 1
    for _ in user_sheet["A"]:
        j += 1
    print(j)
    return j


def pick_genre(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    genres = types.KeyboardButton("–ñ–∞–Ω—Ä—ã")
    menu = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")

    markup.add(genres, menu)

    user_id = message.from_user.id
    genre = find_genre(message)
    user = find_user(user_id)

    if genre == 0:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –∂–∞–Ω—Ä!")
        bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAELK41lopW_7BoLbchvDWDqe9AyCyAungACCxMAAmUaQEv-syxD_8aWvzQE")
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–≤–µ—Ç—å—Ç–µ \"–ñ–∞–Ω—Ä—ã\"", reply_markup=markup)

    print(f'user = {user}, genre = {genre}')
    user_sheet.cell(row=user, column=genre).value = 1
    book.save('Book.xlsx')

    user_genres = get_user_genres(user)

    bot.send_message(message.chat.id, f'–£—Å–ø–µ—Ö! \n\n'
                                      f'–ñ–∞–Ω—Ä \"{message.text}\"'
                                      f'–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã. \n\n–í–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –∂–∞–Ω—Ä–æ–≤:\n'
                                      f'{user_genres}')
    bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAELK5FlopYFSAABVW40d_c2odXFWWLRJX8AAmAWAALsAAHoSgUP7GaqRHiVNAQ")
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–≤–µ—Ç—å—Ç–µ \"–ñ–∞–Ω—Ä—ã\"", reply_markup=markup)


@bot.message_handler(content_types='text')
def message_reply(message):
    if message.text == "–ñ–∞–Ω—Ä—ã":
        genres_cmd(message)

    elif message.text == "–ü–æ–ª—É—á–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç!":
        predict_cmd(message)

    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É":
        return_cmd(message)

    elif message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        support_cmd(message)

    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å":
        add_cmd(message)

    elif message.text == "–£–±—Ä–∞—Ç—å":
        remove_cmd(message)


def get_user_genres(user_id):
    user_genres = []
    user_genres_names = ""
    for cell in user_sheet[user_id]:
        user_genres.append(cell.value)

    for i in range(len(user_genres)):
        if i == 0 or user_genres[i] == 0:
            continue
        else:
            user_genres_names += user_sheet.cell(2, i+1).value
            user_genres_names += ", "
    if len(user_genres_names) > 2:
        user_genres_names = user_genres_names[:-2]

    print("user genres")
    print(user_genres)
    print("user genres names")
    print(user_genres_names)

    return user_genres_names


def get_all_genres(sheet):
    col = sheet.col_values(0)
    return col


def remove_cmd(message):

    bot.send_message(message.chat.id, f'–ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∂–∞–Ω—Ä –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:')
    bot.register_next_step_handler(message, remove_genre)


def remove_genre(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    genres = types.KeyboardButton("–ñ–∞–Ω—Ä—ã")
    menu = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")

    markup.add(genres, menu)

    user_id = message.from_user.id
    genre = find_genre(message)
    user = find_user(user_id)

    if genre == 0:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –∂–∞–Ω—Ä!")
        bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAELK41lopW_7BoLbchvDWDqe9AyCyAungACCxMAAmUaQEv-syxD_8aWvzQE")
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–≤–µ—Ç—å—Ç–µ \"–ñ–∞–Ω—Ä—ã\"", reply_markup=markup)

    print(f'user = {user}, genre = {genre}')
    user_sheet.cell(row=user, column=genre).value = 0
    book.save('Book.xlsx')

    user_genres = get_user_genres(user)

    bot.send_message(message.chat.id, f'–£—Å–ø–µ—Ö! \n\n'
                                      f'–ñ–∞–Ω—Ä \"{message.text}\" —É–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤.\n'
                                      f'\n–í–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –∂–∞–Ω—Ä–æ–≤:\n{user_genres}')
    bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAELK5NlopY3RYNsXY1SqmTy5AqLjcVtTgACpRcAAslE0Uvb7l5uWawiazQE")
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–≤–µ—Ç—å—Ç–µ \"–ñ–∞–Ω—Ä—ã\"", reply_markup=markup)




if __name__ == '__main__':
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)
